pipeline {
    agent any

    tools {
        maven 'M3'
    }

    stages {
        stage('Build') {
            steps {
                sh "${updatePomVersion()}"
                sh 'mvn -B clean package -DskipTests'
                archiveArtifacts artifacts: '**/target/*.jar'
                sh 'git checkout pom.xml'
            }
        }

        stage ('Test') {
            steps {
                parallel( unitTests: {
                    sh 'mvn -B test'
                },
                integrationTests: {
                    sh 'mvn failsafe:integration-test'
                },
                acceptanceTests: {
                    sh """
                    ${deploy(9000)}
                    ./runAcceptanceTests.sh
                    ./shutdown.sh 9000
                    """
                })
            }
        }

        stage('Tag') {
            steps {
                sh """               
                  ${configureGitForUpdate()}
                  ${updatePomVersion()}
                  NEXT_VER=\$( grep '^    <version>.*</version>\$' pom.xml | awk -F'[><]' '{print \$3}' )
                  ${commitPomVersionUpdate()}
                  git tag -a \$NEXT_VER -m "[skip ci] Tagging build as \$NEXT_VER"
                  git push origin --tags
                """
            }
        }

        stage('Deploy') {
            steps {
              sh """
                ${deploy(8091)}    
                # switch traffic
                
                ${deploy(8090)}
                # switch traffic
              """
            }
        }
    }
}

def updatePomVersion() {
     """
     mvn -B build-helper:parse-version versions:set -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} versions:commit
     """
}

def commitPomVersionUpdate() {
    """
    git add pom.xml
    git commit -m "[skip ci] Updating pom.xml version"
    git push origin master
    """
}

def configureGitForUpdate() {
    """
    git config user.email "jpbalmert@gmail.com"
    git config user.name "Jenkins"
    git checkout master
    git reset --hard origin/master
    """                
}

def deploy(port) {
    """
    ./shutdown.sh $port || true
    ./startup.sh $port
    while ./isDown.sh $port  
    do
      echo "Waiting on http://localhost:$port"
      sleep 5
    done
    """
}

